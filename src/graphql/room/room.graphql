type Query {
  room(id: ID!): Room
  roomState(id: ID!): RoomState
  rooms(creatorId: String): [Room!]
  exploreRooms(by: String!): [Room!]!
  searchRooms(query: String!, limit: Int): [Room!]!
}

enum RoomMembership {
  host
  collab
}

type Mutation {
  createRoom(title: String!, description: String, isPublic: Boolean! anyoneCanAdd: Boolean, password: String): Room!
  updateRoom(id: ID!, title: String, description: String, image: Upload, anyoneCanAdd: Boolean, password: String): Room!
  joinPrivateRoom(id: ID!, password: String!): Boolean!
  updateRoomMembership(id: ID!, username: String, userId: String, role: RoomMembership): Boolean!
  deleteRoom(id: ID!): ID!
  pingRoom(id: ID!): Boolean!
}

type Subscription {
  roomStateUpdated(id: ID!): RoomState
}

type Room {
  id: ID!
  title: String!
  isPublic: Boolean!
  description: String
  image: String!
  creatorId: ID!
  createdAt: DateTime!
}

type RoomState {
  id: ID!
  userIds: [String!]!
  # Settings
  anyoneCanAdd: Boolean!
  collabs: [String!]!
}
